use std::fs;
use std::path::{Path, PathBuf};
use std::process::Command;

use anyhow::{Context, Result};
use indicatif::{ProgressBar, ProgressStyle};

use crate::config::{QernelConfig, save_config};

pub fn handle_new(path: String, template: bool) -> Result<()> {
    let project_path = Path::new(&path);
    if project_path.exists() {
        anyhow::bail!("Path already exists: {}", project_path.display());
    }

    let pb = ProgressBar::new_spinner();
    pb.set_style(ProgressStyle::with_template("{spinner} Scaffolding project...").unwrap());
    pb.enable_steady_tick(std::time::Duration::from_millis(80));

    fs::create_dir_all(&project_path).with_context(|| "failed to create project dir")?;


    let src_dir = project_path.join("src");
    fs::create_dir_all(&src_dir)?;
    fs::write(project_path.join("README.md"), "# New Qernel Project\n")?;
    fs::write(project_path.join(".gitignore"), \
        ".DS_Store\n\
        /target\n\
        .env\n\
        .qernel/.venv/\n\
        .qernel/parsed/\n\
        .qernel/papers/\n\
        __pycache__/\n\
        *.py[cod]\n\
        *$py.class\n\
        .logs/\n\
        *.log\n"
    )?;

    // Optional template placeholders
    if template {
        // Suspend spinner while running long-running steps (venv + pip) to avoid flicker
        let res: Result<()> = pb.suspend(|| create_prototype_template(&project_path));
        res?;
    }

    // Initialize git repository
    Command::new("git").arg("init").current_dir(&project_path).output().context("git init failed")?;
    Command::new("git").args(["add", "."]).current_dir(&project_path).output().ok();
    Command::new("git").args(["commit", "-m", "chore: initial scaffold"]).current_dir(&project_path).output().ok();

    pb.finish_with_message("done");
    let ce = crate::util::color_enabled_stdout();
    println!("{} Created project at {}", crate::util::sym_check(ce), project_path.display());

    Ok(())
}

fn create_prototype_template(project_path: &Path) -> Result<()> {
    // Create src directory
    let src_dir = project_path.join("src");
    fs::create_dir_all(&src_dir)?;

    // Create .qernel directory with README
    let qernel_dir = project_path.join(".qernel");
    fs::create_dir_all(&qernel_dir)?;
    let qernel_readme = r#"# Qernel Project Files

This directory contains all qernel-specific files and is automatically ignored by git.

## Directory Structure

- `papers/` - Your PDF files and downloaded papers
- `parsed/` - Processed paper content (generated by mineru)
- `environments/` - Virtual environments and dependencies
- `cache/` - Temporary files and caches

## Adding Papers

To add your own papers to this project:

1. Place PDF files in this directory (or in `papers/` subdirectory)
2. Update `qernel.yaml` to reference the local PDF:

```yaml
papers:
  - url: ".qernel/your-paper.pdf"
```

3. Run `qernel prototype` to process the paper and implement the concepts

## Supported Formats

- PDF files (will be processed with mineru)
- Direct arXiv URLs (will be downloaded and processed)

## Note

This entire directory is ignored by git, so you can store personal files, API keys, and other sensitive data here without worrying about accidentally committing them.
"#;
    fs::write(qernel_dir.join("README.md"), qernel_readme)?;
    
    // Create .qernel/spec.md
    let spec_content = r#"# Project Specification

## Objective
Implement the algorithms and concepts described in the research paper.

## Key Requirements
- Implement the core algorithms from the paper
- Create working examples with clear documentation
- Ensure code is modular and testable

## Implementation Details
- Focus on the main concepts from the paper
- Include both theoretical and practical implementations
- Provide example usage scenarios

## Success Criteria
- All benchmark tests pass
- Code is well-documented with examples
- Performance meets specified requirements
"#;
    fs::write(qernel_dir.join("spec.md"), spec_content)?;
    
    // Create .qernel/benchmark.md
    let benchmark_content = r#"# Benchmarking Criteria

## Functional Tests
- [ ] Core algorithms work correctly
- [ ] Examples run without errors
- [ ] Edge cases are handled properly
- [ ] Performance is acceptable

## Code Quality
- [ ] All functions have comprehensive docstrings
- [ ] Code follows style guidelines
- [ ] No critical bugs or runtime errors
- [ ] Modular design with clear interfaces

## Documentation
- [ ] README explains how to use the code
- [ ] Examples are clear and runnable
- [ ] API documentation is complete
"#;
    fs::write(qernel_dir.join("benchmark.md"), benchmark_content)?;
    
    // Create .qernel/qernel.yaml
    let config = QernelConfig {
        project: crate::config::ProjectConfig {
            name: project_path.file_name()
                .and_then(|n| n.to_str())
                .unwrap_or("qernel-project")
                .to_string(),
            description: "A qernel prototype project".to_string(),
        },
        agent: crate::config::AgentConfig {
            model: "gpt-5-codex".to_string(),
            max_iterations: 15,
        },
        papers: Vec::new(),
        content_files: None,
        benchmarks: crate::config::BenchmarkConfig {
            test_command: "python -m pytest src/tests.py -v".to_string(),
        },
    };
    
    save_config(&config, &qernel_dir.join("qernel.yaml"))?;
    
    // Create .qernel/requirements.txt
    fs::write(qernel_dir.join("requirements.txt"), "pytest\nnumpy\nmineru[core]\n")?;
    
    // Create basic Python files
    fs::write(src_dir.join("__init__.py"), "")?;
    fs::write(src_dir.join("main.py"), "# Main implementation file\n")?;
    fs::write(src_dir.join("tests.py"), "# Test file\nimport pytest\n\ndef test_basic():\n    assert True\n")?;

    // Create a project-local venv and install deps (best-effort).
    if let Err(e) = create_python_venv(project_path) {
        eprintln!("warning: could not create or bootstrap venv: {e}");
        eprintln!("         make sure Python 3 is installed and re-run `qernel new --template` or `qernel prototype`.");
    }
    
    Ok(())
}

fn create_python_venv(project_path: &Path) -> Result<PathBuf> {
    // Always use an absolute project path to avoid nested <proj>/<proj>/.qernel/.venv
    let project_abs = project_path
        .canonicalize()
        .unwrap_or_else(|_| project_path.to_path_buf());

    let venv_dir = project_abs.join(".qernel").join(".venv");
    fs::create_dir_all(venv_dir.parent().unwrap())
        .with_context(|| format!("failed to create {}", venv_dir.parent().unwrap().display()))?;

    // Use absolute target for venv creation
    let venv_arg = venv_dir.to_string_lossy().to_string();

    let ce = crate::util::color_enabled_stdout();
    println!("{} Creating project venv at: {}", crate::util::sym_check(ce), venv_dir.display());

    // Try python3, then python, then Windows py -3
    let candidates: [(&str, &[&str]); 3] = [
        ("python3", &[]),
        ("python", &[]),
        ("py", &["-3"]),
    ];

    let mut created = false;
    for &(prog, pre) in candidates.iter() {
        let status = Command::new(prog)
            .args(pre)
            .args(["-m", "venv", &venv_arg])
            .status();

        if matches!(status, Ok(s) if s.success()) {
            created = true;
            break;
        }
    }
    if !created {
        anyhow::bail!("Failed to create virtual environment in {}", venv_dir.display());
    }

    // Install deps (best-effort)
    let vpy = venv_python(&venv_dir);
    let _ = Command::new(&vpy)
        .args(["-m", "pip", "install", "-U", "pip", "setuptools", "wheel"]) 
        .status();

    let req = project_abs.join(".qernel").join("requirements.txt");
    if req.exists() {
        let _ = Command::new(&vpy)
            .args(["-m", "pip", "install", "-r"]) 
            .arg(&req)
            .status();
    }

    Ok(vpy)
}

fn venv_python(venv_dir: &Path) -> PathBuf {
    if cfg!(windows) {
        venv_dir.join("Scripts").join("python.exe")
    } else {
        venv_dir.join("bin").join("python")
    }
}
